# This file was generated by running 'make template/elasticsearchdb.yaml.raw' in manifests directory
apiVersion: templating.flanksource.com/v1
kind: Template
metadata:
  name: elasticsearch-db
spec:
  resources:
  - apiVersion: elasticsearch.k8s.elastic.co/v1
    kind: Elasticsearch
    metadata:
      name: '{{ .metadata.name }}'
      namespace: '{{ .metadata.namespace }}'
    spec:
      nodeSets:
      - config:
          node.data: true
          node.ingest: true
          node.master: true
          node.store.allow_mmap: false
          xpack.security.authc.anonymous.roles: fluentd
          xpack.security.transport.ssl.supported_protocols: TLSv1.1,TLSv1.2
        count: '{{ .spec.replicas | default 3 }}'
        name: default
        podTemplate:
          spec:
            containers:
            - env:
              - name: ES_JAVA_OPTS
                value: -Xms{{ .spec.heap | default "2Gi" | strings.ReplaceAll "Ki" "k" | strings.ReplaceAll "Mi" "m" | strings.ReplaceAll "Gi" "g"  }} -Xmx{{ .spec.mem.requests | default "2Gi" | strings.ReplaceAll "Ki" "k" | strings.ReplaceAll "Mi" "m" | strings.ReplaceAll "Gi" "g" }}
              name: elasticsearch
              resources:
                limits:
                  cpu: '{{ .spec.resources.limits.cpu | default "2" }}'
                  memory: '{{ .spec.resources.limits.memory | default "3Gi" }}'
                requests:
                  cpu: '{{ .spec.resources.requests.cpu | default "500m" }}'
                  memory: '{{ .spec.resources.requests.memory | default "2Gi" }}'
        volumeClaimTemplates:
        - metadata:
            name: elasticsearch-data
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: '{{ .spec.volume.capacity | default "10G" }}'
            storageClassName: '{{ .spec.volume.storageClass | default ""}}'
      version: '{{ .spec.version }}'
  - apiVersion: kibana.k8s.elastic.co/v1
    kind: Kibana
    metadata:
      name: '{{ .metadata.name }}-kibana'
      namespace: '{{ .metadata.namespace }}'
    spec:
      config:
        elasticsearch.ssl.certificateAuthorities: /usr/share/kibana/config/elasticsearch-certs/ca.crt
      count: 1
      elasticsearchRef:
        name: '{{ .metadata.name }}'
      version: '{{ .spec.version }}'
  - apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      annotations: '{{ .spec.ingress.annotations | default coll.Dict | coll.Merge (coll.Dict "nginx.ingress.kubernetes.io/backend-protocol" "HTTPS" "nginx.ingress.kubernetes.io/client_max_body_size" "64m" "kubernetes.io/tls-acme" "true") | data.ToJSON }}'
      name: '{{ .metadata.name }}-ingress'
      namespace: '{{ .metadata.namespace }}'
    spec:
      rules:
      - host: '{{ .metadata.name }}.{{.spec.domain}}'
        http:
          paths:
          - backend:
              serviceName: '{{ .metadata.name }}-es-http'
              servicePort: 9200
      tls:
      - hosts:
        - '{{ .metadata.name }}.{{.spec.domain}}'
        secretName: '{{ .metadata.name }}-tls'
  - apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      annotations: '{{ .spec.ingress.annotations | default coll.Dict | coll.Merge (coll.Dict "nginx.ingress.kubernetes.io/backend-protocol" "HTTPS" "kubernetes.io/tls-acme" "true") | data.ToJSON }}'
      name: '{{ .metadata.name }}-kibana-ingress'
      namespace: '{{ .metadata.namespace }}'
    spec:
      rules:
      - host: kibana-{{ .metadata.name }}.{{.spec.domain}}
        http:
          paths:
          - backend:
              serviceName: '{{ .metadata.name }}-kibana-kb-http'
              servicePort: 5601
      tls:
      - hosts:
        - kibana-{{ .metadata.name }}.{{.spec.domain}}
        secretName: '{{ .metadata.name }}-kibana-tls'
  source:
    apiVersion: db.flanksource.com/v1
    kind: ElasticsearchDB